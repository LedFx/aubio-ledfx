# I am a workflow that demonstrates how to output the different context objects

name: Build and publish aubio-ledfx


on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-sdist:
    name: Build aubio-Ledfx distribution üì¶
    runs-on: ubuntu-latest
    env:
      DEFAULT_PYTHON: 3.12
    steps:
      - name: Checkout code from GitHub
        uses: actions/checkout@v5 # Checkout your repository
        with:
          submodules: 'recursive'
    
      - name: Install uv
        uses: astral-sh/setup-uv@v7 # Action to set up uv
        with:
          enable-cache: true      
    
      - name: Set up üêç Python ${{ env.DEFAULT_PYTHON }}
        run: uv python install ${{ env.DEFAULT_PYTHON }} # Action to set up Python

      - name: Build a source tarball
        run: uv build --sdist --force-pep517 # Command to build the package
    
      - name: Store the distribution packages with üêç Python ${{ env.DEFAULT_PYTHON }}
        uses: actions/upload-artifact@v4
        with:
            name: aubio-ledfx-sdist
            path: dist/

  build:
    name: Build aubio-ledfx wheels with cibuildwheel üì¶
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, windows-11-arm, macos-15-intel, macos-latest]
    env:
      CFLAGS: "-O3"
      DEFAULT_PYTHON: 3.12
      # target Python versions (cibuildwheel will expand these per-platform)
      CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: 'recursive'
      - name: Install uv
        uses: astral-sh/setup-uv@v7 # Action to set up uv
        with:
          enable-cache: true   
      - name: Set up Python (for build tooling)
        run: |
          uv python install ${{ env.DEFAULT_PYTHON }}

      - name: Install build tooling
        run: |
          python -m pip install --upgrade pip build setuptools wheel cibuildwheel==2.* auditwheel delocate

      - name: Make cibuildwheel before-build script executable
        run: |
          ls -la .github/scripts || true
          chmod +x .github/scripts/cibw_before_build.sh || true

      - name: Install Linux build deps (manylinux / auditwheel)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libsndfile1-dev libsamplerate0-dev libfftw3-dev libavcodec-dev libavformat-dev libavutil-dev libswresample-dev libvorbis-dev libflac-dev libjack-dev librubberband-dev libasound2-dev

      - name: Install macOS build deps
        if: runner.os == 'macOS'
        run: |
          brew update || true
          brew install pkg-config jack ffmpeg libsndfile libvorbis flac libsamplerate rubberband fftw

      - name: Install Windows build deps (MSYS2)
        if: runner.os == 'Windows'
        run: |
          choco install -y --no-progress msys2
          msys2 -c "pacman --noconfirm -S mingw-w64-x86_64-toolchain mingw-w64-x86_64-ffmpeg mingw-w64-x86_64-libsndfile mingw-w64-x86_64-libsamplerate mingw-w64-x86_64-fftw mingw-w64-x86_64-rubberband mingw-w64-x86_64-pkg-config mingw-w64-x86_64-jack"
          echo "C:/msys64/mingw64/bin" >> $GITHUB_PATH

      - name: Build wheels with cibuildwheel
        env:
          CIBW_PRINT_BUILD_OUTPUT: 1
          # Ensure cibuildwheel runs our pre-build script to build aubio
          CIBW_BEFORE_BUILD: "./.github/scripts/cibw_before_build.sh"
          # Export environment for builds so the python extension can find the staged libaubio
          CIBW_ENVIRONMENT: "WAFOPTS=--enable-fftw3 --enable-avcodec --enable-sndfile --enable-rubberband PKG_CONFIG_PATH=$PWD/build/dist/usr/local/lib/pkgconfig:$PWD/build/dist/usr/local/lib64/pkgconfig:$PKG_CONFIG_PATH CFLAGS=-I$PWD/build/dist/usr/local/include:$CFLAGS LDFLAGS=-L$PWD/build/dist/usr/local/lib -Wl,-rpath,$PWD/build/dist/usr/local/lib:$LDFLAGS LD_LIBRARY_PATH=$PWD/build/dist/usr/local/lib:$LD_LIBRARY_PATH"
        run: |
          python -m cibuildwheel --output-dir dist

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: aubio-ledfx-wheels
          path: dist/

  publish-to-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, build-sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/aubio-ledfx/

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v5
      with:
        pattern: aubio-ledfx-*
        path: dist/
        merge-multiple: true
    - name: Download built wheels
      uses: actions/download-artifact@v5
      with:
        name: aubio-ledfx-wheels
        path: dist/
        merge-multiple: true
    - name: Publish distribution üì¶ to PyPI using uv
      run: uv publish --trusted-publishing always

  publish-to-test-pypi:
    name: Publish Python üêç distribution üì¶ to Test PyPI
    if: github.event_name == 'workflow_dispatch' # only publish to test pypi on manual dispatch
    needs: [build, build-sdist]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/aubio-ledfx/

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v5
      with:
        pattern: aubio-ledfx-*
        path: dist/
        merge-multiple: true
    - name: Download built wheels
      uses: actions/download-artifact@v5
      with:
        name: aubio-ledfx-wheels
        path: dist/
        merge-multiple: true
    - name: Publish distribution üì¶ to Test PyPI using uv
      run: uv publish --publish-url https://test.pypi.org/legacy/ --trusted-publishing always
